// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package queries

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password, verified, verification_token)
VALUES ($1, $2, $3, $4)
RETURNING id, email, password, verified, verification_token, created_at, updated_at
`

type CreateUserParams struct {
	Email             string
	Password          string
	Verified          bool
	VerificationToken *string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.Verified,
		arg.VerificationToken,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Verified,
		&i.VerificationToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, email, password, verified, verification_token, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) FindUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Verified,
		&i.VerificationToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByVerificationToken = `-- name: FindUserByVerificationToken :one
SELECT id, email, password, verified, verification_token, created_at, updated_at
FROM users
WHERE verification_token = $1
`

func (q *Queries) FindUserByVerificationToken(ctx context.Context, verificationToken *string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByVerificationToken, verificationToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Verified,
		&i.VerificationToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const markUserAsVerified = `-- name: MarkUserAsVerified :one
UPDATE users
SET verified           = true,
    verification_token = null
WHERE id = $1
  AND verified = false
  AND verification_token IS NOT NULL
RETURNING id, email, password, verified, verification_token, created_at, updated_at
`

func (q *Queries) MarkUserAsVerified(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, markUserAsVerified, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Verified,
		&i.VerificationToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
